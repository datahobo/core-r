cumulative <- cumulative + p ^ (1 / i)
print (paste("step ", i, ": score: ", cumulative, sep = ""))
}
cumulative <- 0
weight <- NULL
p <- 0.1
l <- 100
for (i in 1:l) {
cumulative <- cumulative + p ^ (1 / i)
print (paste("step ", i, ": score: ", cumulative, sep = ""))
}
cumulative <- 0
weight <- NULL
p <- 0.1
l <- 100
for (i in 1:l) {
cumulative <- cumulative + p ^ (1 / i)
print (paste("step ", i, ": score: ", cumulative, sep = ""))
}
print(cumulative * (1 - p))
print(cumulative / p)
print(cumulative / (1 - p))
cumulative <- 0
weight <- NULL
p <- 0.1
l <- 10
for (i in 1:l) {
cumulative <- cumulative + p ^ (1 / i)
print (paste("step ", i, ": score: ", cumulative, sep = ""))
}
print(cumulative / (1 - p))
RankBiasedOverlap <- function(firstList, secondList, p = 0.5) {
# set the initial parameter p such that 0 < p < 1
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
agreement <- NULL
weight <- NULL
overlap <- 0
loopCounter <- min(length(firstList), length(secondList))
# now I need to figure out how to adapt this to rank-biased overlap
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:loopCounter) {
# average overlap according to RBO is the same as we had before
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d], ", net weight:", sum(weight) * totalWeight))
print(paste("overlap:", overlap, "totalWeight:", totalWeight))
}
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList, p = 0.9))
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
RankBiasedOverlap <- function(firstList, secondList, listDepth = min(length(firstList), length(secondList)), p = 0.5) {
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d], ", agreement:", agreement[d]))
print(paste("overlap:", overlap, ", net weight:", sum(weight) * totalWeight, "totalWeight:", totalWeight))
}
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
firstList <-  c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
secondList <- c(10,9, 8, 7, 6, 5, 4, 3, 2, 1)
(RankBiasedOverlap(firstList, secondList, p = 0.7))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d], ", agreement:", agreement[d]))
print(paste("overlap:", overlap, ", net weight:",
sum(weight) * totalWeight, "totalWeight:", totalWeight))
}
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
secondList <- c(10,9, 8, 7, 6, 5, 4, 3, 2, 1)
(RankBiasedOverlap(firstList, secondList, p = 0.7))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d], ", agreement:", agreement[d]))
print(paste("overlap:", overlap, ", net weight:",
sum(weight) * totalWeight))
}
print(paste("totalWeight:", totalWeight))
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
firstList <-  c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
secondList <- c(10,9, 8, 7, 6, 5, 4, 3, 2, 1)
(RankBiasedOverlap(firstList, secondList, p = 0.7))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste(("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
}
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("step", d, ": weight:", weight[d]))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste(("agreement:", agreement[d]))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
}
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("totalWeight:", totalWeight))
return(overlap * totalWeight)
}
# testing convergence
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
firstList <-  c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
secondList <- c(10,9, 8, 7, 6, 5, 4, 3, 2, 1)
(RankBiasedOverlap(firstList, secondList, p = 0.7))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
}
# infinite sum formula for total weight
totalWeight <- (1 - p)
newWeight <- sum(weight)
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("totalWeight:", totalWeight))
print(paste("newWeight:", newWeight))
return(overlap * totalWeight)
}
# testing convergence
cumulative <- 0
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
}
# infinite sum formula for total weight
totalWeight <- (1 - p)
newWeight <- (1 / sum(weight))
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("totalWeight:", totalWeight))
print(paste("newWeight:", newWeight))
print(paste("trialScore:", overlap * newWeight))
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
print(paste("new weight:", sum(weight) * newWeight))
}
newWeight <- (1 / sum(weight))
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("totalWeight:", totalWeight))
print(paste("newWeight:", newWeight))
print(paste("trialScore:", overlap * newWeight))
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- p ^ (d - 1)
newWeight <- sum(weight)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
print(paste("new weight:", sum(weight) * newWeight))
}
newWeight <- (1 / sum(weight))
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("totalWeight:", totalWeight))
print(paste("newWeight:", newWeight))
print(paste("trialScore:", overlap * newWeight))
return(overlap * totalWeight)
}
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList))
firstList <-  c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
secondList <- c(10,9, 8, 7, 6, 5, 4, 3, 2, 1)
(RankBiasedOverlap(firstList, secondList, p = 0.7))
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,7,8,9,4,10,5,6)
(RankBiasedOverlap(firstList, secondList, p = 0.9))
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,4,5,6,7,8,9,10)
(RankBiasedOverlap(firstList, secondList, p = 0.9))
(RankBiasedOverlap(firstList, secondList))
firstList <-  c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
secondList <- c(10,9, 8, 7, 6, 5, 4, 3, 2, 1)
(RankBiasedOverlap(firstList, secondList, p = 0.9))
(RankBiasedOverlap(firstList, secondList))
# top 3 similar - 0.52, 0.42
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,3,7,8,9,4,10,5,6)
(RankBiasedOverlap(firstList, secondList, p = 0.9))
(RankBiasedOverlap(firstList, secondList))
firstList <- c(1,2,3,4,5,6,7,8,9,10)
secondList <- c(1,2,8,7,6,5,4,10,9,3)
(RankBiasedOverlap(firstList, secondList, p = 0.9))
(RankBiasedOverlap(firstList, secondList))
RankBiasedOverlap <- function(firstList,
secondList,
listDepth = min(length(firstList),
length(secondList)),
p = 0.5) {
# listDepth is how far into the list we will go
# set the initial parameter p such that 0 < p < 1 ----
## when p = 0, only the top rank has any value
## when p = 1, weights are approximately equal across the ranking
# p <- 0
if (p > 1) p <- 1
if (p < 0) p <- 0
# agreement is the vector of proportion of firstList and secondList that ----
## that are overlapped at depth d
agreement <- NULL
# weight is the vector of convergent weights
weight <- NULL
# overlap is the cumulative overlap score
overlap <- 0
# infinite sum formula for total weight
totalWeight <- (1 - p)
for (d in 1:listDepth) {
# agreement is the proportion of both lists that are overlapped at d
agreement[d] <- (length(intersect(firstList[1:d], secondList[1:d])) / d)
# in the loop, the weight's value is p ^ d - 1
weight[d] <- (1 - p) * p ^ (d - 1)
newWeight <- sum(weight)
overlap <- overlap + (weight[d] * agreement[d])
print(paste("step", d, ": weight:", weight[d]))
print(paste("agreement:", agreement[d]))
print(paste("overlap:", overlap))
print(paste("net weight:", sum(weight) * totalWeight))
print(paste("new weight:", sum(weight) * newWeight))
}
newWeight <- (1 / sum(weight))
print(paste("cumulative weight:", sum(weight) * totalWeight))
print(paste("totalWeight:", totalWeight))
print(paste("newWeight:", newWeight))
print(paste("trialScore:", overlap * newWeight))
return(overlap * totalWeight)
}
