{
    "contents" : "# Dates and Times in Learning R\n\nrm(list = ls())\n\n## Goals\n# Understand the built-in functions POSIXct, POSIXlt, Date\n# convert a string to a date\n# Display dates in a variety of formats\n# Specify and manipulate time zones\n# use the lubridate package\n\n# ct is short for calendar time\n# POSIXct stores dates as the number of seconds since the start of 1970 in UTC\n## best for storing dates and calculating with them\n# POSIXlt stores dates as a list, with components for seconds, minutes, hours, day of month, etc\n## best for extracting specific parts of a date\n\n# Sys.time\n(now_ct <- Sys.time())\nclass(now_ct)\n## unclass shows how the date is stored - as a number\nunclass(now_ct)\n(now_lt <- as.POSIXlt(now_ct))\nclass(now_lt)\nunclass(now_lt)\n\n# Date - stores as the number of days since the start of 1970\n(now_date <- as.Date(now_ct))\nclass(now_date)\nunclass(now_date)\n\n# other classes:\n## date\n## dates\n## chron\n## yearmon\n## yearqtr\n## timeDate\n## ti\n## jul\n\n# Parsing dates from strings, especially when importing\n# strptime returns POSIXlt dates\n# specify the format as a string, with symbols for each position\n# fixed characters are the delimiters\n\nmoon_landings_str <- c(\"20:17:40 20/07/1969\",\n                       \"06:54:35 19/11/1969\",\n                       \"09:18:11 05/02/1971\",\n                       \"22:16:29 30/07/1971\",\n                       \"02:23:35 21/04/1972\",\n                       \"19:54:57 11/12/1972\"\n                       )\n\n(moon_landings_lt <- strptime(\n  moon_landings_str,\n  \"%H:%M:%S %d/%m/%Y\",\n  tz = \"UTC\"\n  ))\n# if a string doesn't match the format, it returns NA.\n\n## Formatting dates\n# use strftime to format a date to a string\n# %I - hour (12-hour system)\n# %M - minute\n# %p - AM/PM indicator\n# %A - name of the day of week\n# %d - date\n# %B - full name of the month\nstrftime(now_ct, \"It's %I:%M%p on %A %d %B, %Y\")\n\n# Time Zones\n# see the OS date-time settings:\nSys.getlocale(\"LC_TIME\")\n### best way: Olson form of time zones - Continent/City\n##### listed in the following file:\ntimeZoneFile <- file.path(R.home(\"share\"), \"zoneinfo\", \"zone.tab\")\nread.table(timeZoneFile)\n### next best - manual offset from UTC\nstrftime(now_ct, tz = \"UTC-5\")\n### worst case - use an abbreviation. But these are not unique, hard to read, and different in different operating systems\n\n# Arithmetic with dates and times\n# can do it with all 3 base classes\n# adding to POSIX dates shifts them by seconds\n# adding to Date dates shifts them by days\nnow_ct + 86400\nnow_lt + 86400\nnow_date + 1\n\n# you can't add two dates together\n# subtraction between dates works, and is the same for all types\n# the units of difference are automatically chosen\n# based on the difference between the times\nthe_start_of_time <- as.Date(\"1970-01-01\")\nthe_end_of_time <- as.Date(\"2012-12-21\")\n(all_time <- the_end_of_time - the_start_of_time)\n# what class is it?\nclass(all_time)\nunclass(all_time)\n# you can change the units\ndifftime(the_end_of_time, the_start_of_time, units = \"weeks\")\n\n# use seq.Date or seq.POSIXt to generate dates\nseq(the_start_of_time, the_end_of_time, by = \"1 year\")\nseq(the_start_of_time, the_end_of_time, by = \"500 days\")\n\n# You can use other functions too:\n## repeat\n## round\n## cut\n## mean\n## summary\n\n### Lubridate\n# ymd figures out dates as long as they're in the correct order\nlibrary(lubridate)\njohnHarrisonBirthDate <- c(\"1693-03 24\", \"1693/03\\\\24\", \"Tuesday+1693.03*24\")\nymd(johnHarrisonBirthDate)\n# there are other variants for other orders\n## ydm\n## mdy\n## myd\n## dmy\n## dym\n\n# you can add time to those as well\n## ymd_h\n## ymd_hm\n## ymd_hms\n\n# these all return POSIXct dates, and have a default time zone of UTC\n# stamp lets you specify a format in a more human-readable manner.\n# Use an example date, and it returns a function that you can call to format your dates\ndateFormatFunction <- stamp(\"A moon landing occurred on Monday 01 January 1900 at 18:00:00\")\ndateFormatFunction(moon_landings_lt)\n\n# for time ranges, there are three different variable types:\n### Durations (as seconds)\n(durationOneToTenYears <- dyears(1:10))\ntoday() + durationOneToTenYears\n##### dyears\n##### dseconds\n##### dminutes, etc\n\n### Periods specify time spans according to clock time\n##### their exact length isn't apparent until you add them to an instant\n(periodOneToTenYears <- years(1:10))\ntoday() + periodOneToTenYears\n\n### Intervals are defined by the instants at their beginning and end.\n##### If we know the start or end date of the duration, we can use an interval and an intermediary\n##### to convert exactly from the duration to the period:\n\n# Exercises\n## Exercise 11-1\nbeatlesBirthDates <- ymd(c(\"1940-07-07\", \"1940-10-09\", \"1942-06-18\", \"1943-02-25\"))\nnames(beatlesBirthDates) <- c(\"Ringo Starr\",\n                              \"John Lennon\",\n                              \"Paul McCartney\",\n                              \"George Harrison\")\nbeatlesBirthDates\nstrftime(beatlesBirthDates, \"%a %d %b %y\", tz = \"UTC\")\n\n# Exercise 11-2\n(timeZones <- data.frame(OlsonNames()))\nnames(timeZones)\nnames(timeZones) <- \"OlsonNames\"\nlibrary(stringr)\npossibleTimeZones <- subset(timeZones, str_detect(OlsonNames, \"America\"))\npossibleTimeZones <- subset(timeZones, str_detect(OlsonNames, \"York\"))\n\n# Exercise 11-3\n# function that takes a date and returns an astrological sign\nwhatsMySign <- function(date) {\n  signsDates <- c(\"Aries\",\n                 \"Taurus\",\n                             \"Gemini\",\n                             \"Cancer\",\n                             \"Leo\",\n                             \"Virgo\",\n                             \"Libra\",\n                             \"Scorpio\",\n                             \"Sagittarius\",\n                             \"Capricorn\",\n                             \"Aquarius\",\n                             \"Pisces\")\n                           )\n  names(signsDates) <- c(\"ZodiacSigns\")\n  startDates <- data.frame(ymd(c(\"14-03-21\",\n                                 \"14-04-20\",\n                                 \"14-05-21\",\n                                 \"14-06-21\",\n                                 \"14-07-23\",\n                                 \"14-08-23\",\n                                 \"14-09-23\",\n                                 \"14-10-23\",\n                                 \"14-11-22\",\n                                 \"14-12-22\",\n                                 \"14-01-20\",\n                                 \"14-02-19\")\n                               )\n                           )\n  names(startDates) <- c(\"startDate\")\n  endDates <- data.frame(ymd(c(\"14-04-19\",\n                               \"14-05-20\",\n                               \"14-06-20\",\n                               \"14-07-22\",\n                               \"14-08-22\",\n                               \"14-09-22\",\n                               \"14-10-22\",\n                               \"14-11-21\",\n                               \"14-12-21\",\n                               \"14-01-19\",\n                               \"14-02-18\",\n                               \"14-03-20\")\n                             )\n                         )\n  names(endDates) <- c(\"endDate\")\n  signsDates <- merge(signsDates, startDates)\n}",
    "created" : 1430319499147.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2353451106",
    "id" : "A119664E",
    "lastKnownWriteTime" : 1429741502,
    "path" : "~/Documents/github/core-r/learning-r/C_11.R",
    "project_path" : "C_11.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}