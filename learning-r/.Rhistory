conn <- dbConnect(driver, dbFile)
dbReadTable(conn, "Daylog")
tempTable <- dbReadTable(conn, "Daylog")
dbDisconnect(conn)
dbUnloadDriver(driver)
?dbDisconnect
?dbUnloadDriver
yn_to_logical <- function(x)
{
y <- rep.int(NA, length(x))
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
}
names(bikeData)
bikeData$DrugUse <- yn_to_logical(bikeData$DrugUse)
head(bikeData)
View(bikeData)
bikeFile <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bikeData <- read.xlsx2(
bikeFile,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bikeData)
library(xlsx)
bikeFile <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bikeData <- read.xlsx2(
bikeFile,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bikeData)
yn_to_logical <- function(x)
{
y <- rep.int(NA, length(x)) # Setting a default first lets us handle exceptions
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
}
# calling it:
bikeData$DrugUse <- yn_to_logical(bikeData$DrugUse2)
View(bikeData)
bikeFile <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bikeData <- read.xlsx2(
bikeFile,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bikeData)
bikeData$DrugUse2 <- yn_to_logical(bikeData$DrugUse)
View(bikeData)
yn_to_logical <- function(x)
{
y <- rep.int(NA, length(x)) # Setting a default first lets us handle exceptions
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
y # Need the last line to ensure the function returns the correct value
}
# calling it:
bikeData$DrugUse2 <- yn_to_logical(bikeData$DrugUse)
View(bikeData)
bikeData$DrugUse2 <- yn_to_logical(bikeData$DrugUse)
bikeData$DrugUse <- yn_to_logical(bikeData$DrugUse)
bikeData$DrugUse <- yn_to_logical(bikeData$DrugUse)
bikeData$DrugUse2 <- NULL
View(bikeData)
yn_to_logical <- function(x)
{
y <- rep.int(NA, length(x)) # Setting a default first lets us handle exceptions
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
y # Need the last line to ensure the function returns the correct value
}
yn_to_logical <- function(x)
{
y <- rep.int(NA, length(x)) # Setting a default first lets us handle exceptions
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
return(y) # Need the last line to ensure the function returns the correct value
}
bikeData <- read.xlsx2(
bikeFile,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
head(bikeData)
bikeData$DrugUse2 <- yn_to_logical(bikeData$DrugUse)
View(bikeData)
bikeData$DrugUse <- yn_to_logical(bikeData$DrugUse)
View(bikeData)
bikeData$DrugUse2 <- NULL
library(stringr)
data(english_monarchs, package = "learningr")
head(english_monarchs)
english_monarchs$multipleKingdoms <- str_detect(english_monarchs$domain, fixed(","))
?subset
multiKingdoms <- subset(english_monarchs, multipleKingdoms, select = c(name, domain))
View(multiKingdoms)
english_monarchs[multipleKingdoms, c("name", "domain")]
data(english_monarchs, package = "learningr")
head(english_monarchs)
multipleKingdoms <- str_detect(english_monarchs$domain, fixed(","))
english_monarchs[multipleKingdoms, c("name", "domain")]
# or create your own data frame
english_monarchs$manyKingdoms <- str_detect(english_monarchs$domain, fixed(","))
multiKingdoms <- subset(english_monarchs, manyKingdoms, select = c(name, domain))
View(multiKingdoms)
multipleRulers <- str_detect(english_monarchs$name, ",|and")
english_monarchs$name[multipleRules & !is.na(multiple_rulers)]
english_monarchs$name[multipleRulers & !is.na(multiple_rulers)]
english_monarchs$name[multipleRulers & !is.na(multipleRulers)]
individualRulers <- str_split(english_monarchs$name, ", | and")
head(individualRulers[sapply(individualRulers, length) > 1])
source('~/.active-rstudio-document', echo=TRUE)
th <- c("th", "ð", "þ")
th <- c("th", "ð", "þ")
sapply(
th, function(th)
{
sum(str_count(english_monarchs$name, th))
}
)
english_monarchs$newName <- str_replace_all(english_monarchs$name, "[ðþ]", "th")
gender <- c( "MALE", "Male", "male", "M", "FEMALE", "Female", "female", "f", NA )
cleanGender <- str_replace(gender, ignore.case("^m(ale)?$"), "Male")
cleanGender <- str_replace(clean_gender, ignore.case("^f(email)?$"), "Female")
(cleanGender <- str_replace(clean_gender, ignore.case("^f(email)?$"), "Female"))
(cleanGender <- str_replace(cleanGender, ignore.case("^f(email)?$"), "Female"))
(cleanGender <- str_replace(cleanGender, ignore.case("^f(emale)?$"), "Female"))
english_monarchs$length.of.reign.years <-
english_monarchs$end.of.reign -
english_monarchs$start.of.reign
english_monarchs$length.of.reign.years <- with(
english_monarchs, end.of.reign - start.of.reign)
english_monarchs <- within(
english_monarchs{length.of.reign.years <-
end.of.reign - start.of.reign})
english_monarchs <- within(
english_monarchs(length.of.reign.years <-
end.of.reign - start.of.reign))
english_monarchs <- within(
english_monarchs[length.of.reign.years <-
end.of.reign - start.of.reign])
english_monarchs <- within(
english_monarchs{length.of.reign.years <-
end.of.reign - start.of.reign})
english_monarchs <- within(
english_monarchs, {length.of.reign.years <-
end.of.reign - start.of.reign})
english_monarchs <- within(
english_monarchs, {length.of.reign.years <-
end.of.reign - start.of.reign
reign.more.than.30.years <- length.of.reign.years > 30})
View(english_monarchs)
data("deer_endocranial_volume", package = "learningr")
has.all.measurements <- complete.cases(deer_endocranial_volume)
deer_endocranial_volume[has_all_measurements, ]
has.all.measurements <- complete.cases(deer_endocranial_volume)
deer_endocranial_volume[has_all_measurements, ]
deer_endocranial_volume[has.all.measurements, ]
na.omit(deer_endocranial_volume)
na.fail(deer_endocranial_voluem
na.fail(deer_endocranial_volume)
na.fail(deer_endocranial_volume)
deer.wide <- deer_endocranial_volume[, 1:5]
View(deer.wide)
View(deer_endocranial_volume)
install.packages("reshape2")
library(reshape2)
deerLong <- melt(deer.wide, id.vars = "SkullID")
head(deerLong)
melt(deer.wide, measure.vars = c("VolCT", "VolBead", "VolLWH", "VolFinarelli"))
deer.wide.again <- dcast(deerLong, SkullID ~ variable)
View(deer.wide.again)
library(sqldf)
install.packages("sqldf")
library(sqldf)
library(tcltk)
subset(deer_endocranial_volume, VolCT > 400 | VolCT2 > 400, c(VolCT, VolCT2))
query <- "SELECT VolCT, VolCT2 FROM deer_endocranial_volume
WHERE VolCT > 400 OR VolCT2 > 400"
sqldf(query)
x <- c(2, 32, 4, 16, 8)
sort(x)
sort(x, decreasing = TRUE)
sor(c("I", "shot", "the", "city", "sheriff"))
sort(c("I", "shot", "the", "city", "sheriff"))
order(x)
x[order(x)]
identical(sort(x), x[order(x)])
year.order <- order(english_monarchs$start.of.reign)
english_monarchs[year.order, ]
library(plyr)
arrange(english_monarchs, start.of.reign)
(x <- sample(3, 7, replace = TRUE))
rank(x)
rank(x, ties.method = "first")
inst.na <- Negate(is.na)
ct2 <- deer_endocranial_volume$VolCT2 # for convenience
inst.na <- Negate(is.na)
identical(isnt.na(ct2), !is.na(ct2))
isnt.na <- Negate(is.na)
identical(isnt.na(ct2), !is.na(ct2))
Filter(isnt.na, ct2)
Position(isnt.na, ct2)
Find(isnt.na, ct2)
get_volume <- vunction(ct, bead, lwh, finarelli, ct2, bead2, lwh2) {
# If there is a second measurement, take the average
if (!is.na(ct2)) {
ct <- (ct + ct2) / 2
bead <- (bead + bead2) / 2
lwh <- (lwh + lwh2) / 2
}
get_volume <- function(ct, bead, lwh, finarelli, ct2, bead2, lwh2) {
# If there is a second measurement, take the average
if (!is.na(ct2)) {
ct <- (ct + ct2) / 2
bead <- (bead + bead2) / 2
lwh <- (lwh + lwh2) / 2
}
# Divide lwh by 4 to bring it line with the other measurements
c(ct = ct, bead = bead, lwh.4 = lwh / 4, finarelli = finarelli)
}
measurements.by.deer <- with(deer_endocranial_volume,
Map(get_volume, VolCT, VolBead, VolLWH,
VolFinarelli, VolCT2, VolBead2, VolLWH2))
head(measurements.by.deer)
# Reduce("+", list(a, b, c, d, e))
pmax2 <- function(x, y) ifelse(x >= y, x, y)
Reduct(pmax2, measurements.by.deer)
Reduce(pmax2, measurements.by.deer)
data("hafu", package = "learningr")
head(hafu)
hafu$FatherQuestion <- str_detect(hafu$Father, fixed("?"))
head(hafu)
hafu$MotherQUestion <- str_detect(hafu$Mother, fixed("?"))
?str_replace
hafu <- within(hafu, {Father <- str_replace(Father, fixed("?"), "")
Mother <- str_replace(Mother, fixed("?"), "")})
head(hafu)
hafu.long <- melt(hafu, id.vars = "Character")
View(hafu.long)
common.value <- NULL
value.count <- NULL
i <- 1
common.value[i] <- mode(x)
?mode
x <- c(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6)
common.value <- NULL
value.count <- NULL
i <- 1
hafu.long <- melt(hafu, measure.vars = c("Father", "Mother"))
View(hafu.long)
GetMostCommonValues <- function(x) {
counts <- table(x, useNA = "always")
head(sort(counts, decreasing = TRUE), 10)
}
GetMostCommonValues(x)
GetMostCommonValues(hafu$Mother)
data(obama_vs_mccain, package = "learningr")
obama <- obama_vs_maccain$Obama
obama <- obama_vs_mccain$Obama
mean(obama)
table(cut(obama, seq.int(0, 100, 10)))
var(obama)
sd(obama)
sd(obama) ^ 2
mad(obama)
pmin(obama_vs_mccain$Obama, obama_vs_mccain$McCain)
obama
View(obama_vs_mccain)
range(obama)
cummin(obama)
IQR(obama)
length(obama)
fivenum(obama)
summary(obama_vs_mccain)
library(ggplot2)
install.packages("ggplot2")
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point()
library(ggplot2)
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point()
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point(color = "violet", shape = 20)
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point(color = "violet", shape = 20) +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) +
scale_y_log10(breaks = seq(50, 75, 5))
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point(color = "violet", shape = 20) +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) +
scale_y_log10(breaks = seq(50, 75, 5)) +
facet_wrap(~ Region, ncol = 4)
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point(color = "violet", shape = 20) +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) +
scale_y_log10(breaks = seq(50, 75, 5)) +
facet_wrap(~ Region, ncol = 4)
?theme
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point(color = "violet", shape = 20) +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) +
scale_y_log10(breaks = seq(50, 75, 5)) +
facet_wrap(~ Region, ncol = 4) +
theme(axis.text.x = element_text(angle = 30))
ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point(color = "violet", shape = 20) +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) +
scale_y_log10(breaks = seq(50, 75, 5)) +
facet_wrap(~ Region, ncol = 4) +
theme(axis.text.x = element_text(angle = 30, align = "right"))
(gg1 <- ggplot(obama_vs_mccain, aes(Income, Turnout)) +
geom_point()
)
(gg2 <- gg1 +
facet_wrap(~ Region, ncol = 5) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
)
geom_lin()
ggplot(crag_tag$daylog, aes(Date, -Min.Depth)) +
geom_line()
ggplot(crab_tag$daylog, aes(Date, -Min.Depth)) +
geom_line()
data(crab_tag)
data(crab_tag, package = "learningr")
ggplot(crab_tag$daylog, aes(Date, -Min.Depth)) +
geom_line()
ggplot(crab_tag$daylog, aes(Date)) +
geom_line(aes(y = -Max.Depth)) +
geom_line(aes(y = -Min.Depth))
library(reshape2)
library(reshape2)
crab_long <- melt(
crab_tag$daylog,
id.vars = "Date",
measure.vars = c("Min.Depth", "Max.Depth")
)
ggplot(crab_long, aes(Date, -value, group = variable)) +
geom_line()
ggplot(crab_tag$daylog, aes(Date, ymin = -Min.Depth, ymax = -Max.Depth)) +
geom_ribbon(color = "black", fill = "white")
ggplot(obama_vs_mccain, aes(Obama)) +
geom_histogram(binwidth = 5)
geom_histogram(binwidth = 10)
ggplot(obama_vs_mccain, aes(Obama)) +
geom_histogram(binwidth = 10)
ggplot(obama_vs_mccain, aes(Obama)) +
geom_histogram(binwidth = 2)
ggplot(obama_vs_mccain, aes(Obama, ..density..)) +
geom_histogram(binwidth = 5)
ggplot(obama_vs_mccain, aes(Obama)) +
geom_histogram(binwidth = 2)
ggplot(obama_vs_mccain, aes(Obama, ..density..)) +
geom_histogram(binwidth = 5)
ggplot(ovm, aes(Region, Obama)) +
geom_boxplot()
ovm <- within( obama_vs_mccain, Region <- reorder( Region, Obama, median) )
ggplot(ovm, aes(Region, Obama)) +
geom_boxplot()
ovm <- ovm[!(ovm$State %in% c("Alaska", "Hawaii")),]
religions_long <- melt(ovm,
id.vars = "State",
measure.vars = c("Catholic", "Protestant",
"Non.religious", "Other")
)
ggplot(religions_long, aes(State, value, fill = variable)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(religions_long, aes(State, value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip()
ggplot(religions_long, aes(State, value, fill = variable)) +
geom_bar(stat = "identity", position = "fill") +
coord_flip()
names(obama_vs_mccain)
cor(obama_vs_mccain$Obama, obama_vs_mccain$Unemployment)
geom_plot()
ggplot(obama_vs_mccain, aes(Obama, Unemployment)) +
geom_plot()
ggplot(obama_vs_mccain, aes(Obama, Unemployment)) +
geom_point()
names(bikeData)
tempBikeData <- melt(obama_vs_mccain,
id.vars = "DrugUse",
measure.vars = "NumericTime")
tempBikeData <- melt(bikeData,
id.vars = "DrugUse",
measure.vars = "NumericTime")
names(tempBikeData)
View(tempBikeData)
View(bikeData)
library(xlsx)
bikeFile <- system.file(
"extdata",
"Alpe.d.Huez.xls",
package = "learningr"
)
bikeData <- read.xlsx2(
bikeFile,
sheetIndex = 1,
startRow = 2,
endRow = 38,
colIndex = 2:8,
colClasses = c(
"character", "numeric", "character", "integer",
"character", "character", "character"
)
)
yn_to_logical <- function(x)
{
y <- rep.int(NA, length(x)) # Setting a default first lets us handle exceptions
y[x == "Y"] <- TRUE
y[x == "N"] <- FALSE
return(y) # Need the last line to ensure the function returns the correct value
}
bikeData$DrugUse <- yn_to_logical(bikeData$DrugUse)
View(bikeData)
names(bikeData)
tempBikeData <- melt(bikeData,
id.vars = "DrugUse",
measure.vars = "NumericTime")
names(tempBikeData)
View(tempTable)
View(tempBikeData)
View(tempBikeData)
ggplot(tempBikeData, DrugUse, value)
ggplot(tempBikeData, aes(DrugUse, value))
ggplot(tempBikeData, aes(DrugUse, value)) +
geom_histogram(binwidth = 5)
ggplot(tempBikeData, aes(DrugUse, value)) +
geom_histogram(stat = "identity", binwidth = 5)
ggplot(bikeData, aes(NumericTime, DrugUse)) +
geom_boxplot()
ggplot(bikeData, aes(DrugUse, NumericTime)) +
geom_boxplot()
ggplot(bikeData, aes(DrugUse, NumericTime)) +
geom_histogram(stat = "identity", binwidth = 5)
ggplot(bikeData, aes(DrugUse, NumericTime)) +
geom_boxplot()
data(gonorrhoea)
data(gonorrhoea, package = "learningr")
names(gonorrhoea)
ggplot(gonorrhoea, aes(Age.Group, Rate)) +
geom_boxplot()
ggplot(gonorrhoea, aes(Year, Rate)) +
geom_histogram(stat = "identity", binwidth = 5)
ggplot(gonorrhoea, aes(Year, Rate)) +
geom_histogram(stat = "identity", binwidth = 1)
View(gonorrhoea)
ggplot(gonorrhoea, aes(Ethnicity, Rate)) +
geom_histogram(stat = "identity", binwidth = 1)
ggplot(gonorrhoea, aes(Ethnicity, Rate / nrow)) +
geom_histogram(stat = "identity", binwidth = 1)
ggplot(gonorrhoea, aes(Ethnicity, Rate / length(Rate))) +
geom_histogram(stat = "identity", binwidth = 1)
ggplot(gonorrhoea, aes(Year, Rate / length(Rate))) +
geom_histogram(stat = "identity", binwidth = 1)
ggplot(bikeData, aes(NumericTime)) +
geom_histogram(binwidth = 2) +
facet_wrap(~ DrugUse)
ggplot(gonorrhoea, aes(Age.Group, Rate, group = Year, fill =
Year)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Ethnicity + Gender)
ggplot(gonorrhoea, aes(Age.Group, Rate, group = Year, color = Year)) +
geom_line() +
facet_grid(Ethnicity ~ Gender)
ggplot(gonorrhoea, aes(Age.Group, Rate, group = Year, color = Year)) +
geom_line() +
facet_grid(Ethnicity ~ Gender, scales = "free_y")
View(deerLong)
install.packages('ggplot2')
install.packages('lattice', 'rpart')
install.packages(c('lattice', 'rpart'))
install.packages('reshape2')
